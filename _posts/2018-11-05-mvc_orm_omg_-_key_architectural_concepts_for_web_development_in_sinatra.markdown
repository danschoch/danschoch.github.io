---
layout: post
title:      "MVC ORM OMG! - Key Architectural Concepts for Web Development In Sinatra "
date:       2018-11-05 20:53:02 +0000
permalink:  mvc_orm_omg_-_key_architectural_concepts_for_web_development_in_sinatra
---


Working in Sinatra these past few weeks has given me a taste of what it looks and feels like to develop a functioning web application containing all the vital components that make an app production-ready. At the most basic level, this includes a front-end that presents information in a user-friendly way  for web clients, a database to persist that user's data, and server-side components that contain all the application's business logic. In small projects that consist of static pages or a very small team of developers, perhaps the structure of these components is not as crucial, as communication at this level could likely offset any structural difficulties. However, to prepare for building or being brought in to contrubute to projects of significantly larger sizes and scopes, we learned about two key architectural paradigms that are utilized in a substantial majority of web applications today. Those are Object-Relational Mapping and Model-View-Controller architecture. It should be noted that my knowledge of these concepts is limited to an object-oriented language (Ruby) and a relational database (SQLite), and that the utility of these paradigms may not be the same for other types of programming languages or databases. More on that in a future post...

## Object Relational Mapping (ORM)
Object Relational Mapping is a simple, intuitive technique that maps and connects a progam written in an object-oriented manner to a relational database. This is done by equating database tables to object classes, with each row of the table representing an instance of the object and each column representing an attribute of the class. The main benefit of using ORM for database connections is that it allows for an easy-to-follow convention that can be follwed by a team of developers large or small. "Class equals table, instance equals row" is a simple refrain that provides intuitive, rigid structure. Consequently, this makes is possible to reap the second benefit of ORM, which is that it allows developers to standardize the methods that are used in database development and maitenence. For example, Sinatra contains a plethora of standard methods that correlate to basic CRUD actions that are repeated over and over in many web applications. This standardization saves developers lots of time and frustration as the application grows. Code is cleaner and more conventional, making it easier for other programmers on the team to understand and contribute to.

## Model-View-Controller (MVC) Architecture
The Model-View-Controller architectural pattern is one answer to the question of how to organize frameworks for web development. Sinatra is an example of an MVC framework. The two guiding principles of the MVC paradigm are separation of concerns and single respoonsibility. Together, they basically mean that code should be broken down into chunks that each address a single problem of a manageable size. The benefits of following these principles include a more reader-friendly codebase and much easier debugging. In an MVC framework, The main production components of the app are broken down into three categories - Models, Views, and Controllers.

Models are where object classes are defined. They represent the logical building blocks of the app that will be pieced together for an actually usable user experience by the Controllers and Views. Furthermore, if we are using a relational database and ORM, as Sinatra does with the ActiveRecord gem, models provide a link between the data in your database and the rest of the app. Any helper methods relating a specific object class, such as formating a "created at" date for a blog post or requring a secure password for a user, belong here.

Views are fairly self-explanatory. They are simply what the user's web browser will display. In Sinatra, we wrote most of our views in HTML, although all of the views files we created were .erb files, meaning that we can pass Ruby code into them in order to create dynamic pages. This is a concept so fundamental to the use of the internet these days that younger generations raised on the Internet may not even realize that it exists. By using Embedded Ruby files (in conjuntion with MVC architecture), we are no longer confined to static web pages that display the same fixed information to every user. We can show information that is solely related to that user's interation with the app, such as user account information or a shopping cart of items. Views are the user's gateway into our app.

Finally, controllers are created to bring the app together. They handle HTTP requests from clients (Sinatra is built on a more rudimentary Ruby framework called Rack that was specfically created for the HTTP needs of web apps), and act as a control flow mechanism for the duration of your user's interation with your app. Essentially, each model has a corresponding controller and set of views. The controller will field a particular HTTP request, find that in the controller, execute any actions that need to be taken regarding retreving or saving data to the database, and directs the user to the appropriate view with the approprate data displayed. The controller is like the shipping supply chain between a big online store and the end consumer.

## Conclusion
Both of these design patterns are great ways to dive into web development for beginners. They are intuitive and powerful guidelines for application structure that can handle the vast majority of a developer's needs. I am aware that there are newer, potentially more suitable solutions for web development  that are currently being explored by diffrent companies, but as a student, MVC and ORM with Sinatra has given me a great tool for understanding how to build a complete web application with established best practices and which I can now take forward as I dive into more advanced concepts, frameworks, and langages.
